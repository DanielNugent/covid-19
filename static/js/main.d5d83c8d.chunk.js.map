{"version":3,"sources":["logo.svg","Components/MapChart.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MapChart","props","state","data","dates","max","dateIndex","date","csv","this","datalink","then","mergeRegions","firstrow","Object","keys","n","shift","pop","setState","nextProps","nextState","colorScale","scaleLinear","domain","min","range","manageKeys","newPreData","map","row","Name","nameFix","undefined","filter","find","key","parseInt","values","input","conv","val","geo","count","properties","POP_EST","length","Container","title","Row","className","Col","md","stepSize","labelStepSize","intent","onChange","changeDate","labelRenderer","showTrackFill","value","vertical","Intent","SUCCESS","fluid","style","marginTop","marginBottom","projectionConfig","rotate","scale","stroke","strokeWidth","geography","geographies","d","s","NAME","NAME_LONG","rsmKey","fill","perCapita","datalessCountryColor","React","Component","App","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,oPCetBC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,KAAM,GACNC,MAAO,GACPC,IAAK,EACLC,UAAW,EACXC,KAAM,WAPK,E,gEAWE,IAAD,OAChBC,YAAIC,KAAKR,MAAMS,UAAUC,MAAK,SAAAR,GAC1BA,EAAO,EAAKS,aAAaT,GAGzB,IAFA,IAAIU,EAAWC,OAAOC,KAAKZ,EAAK,IAEvBa,EAAI,EAAGA,GAAK,EAAGA,IAAKH,EAASI,QACtCJ,EAASK,MACT,EAAKC,SAAS,CAAEhB,OAAMG,UAAW,EAAGC,KAAMM,EAAS,GAAIT,MAAM,YAAKS,U,0CAItDO,EAAWC,GAC3BZ,KAAKa,WAAaC,cAAcC,OAAO,CAACf,KAAKR,MAAMwB,IAAKJ,EAAUhB,MAAMqB,MAAM,CAAC,OAAQ,W,mCAG9EvB,GAAO,IAGZwB,EAHW,OAEXC,EAAa,GAmBjB,OAhBAzB,EAAK0B,KAAI,SAAAC,GACLA,EAAIC,KAAO,EAAKC,QAAQF,EAAI,wBACTG,IAAfN,IACAA,EAAab,OAAOC,KAAKe,GAAKI,QAAO,SAAAC,GAAI,MAAc,mBAATA,GAAsC,SAATA,GAA4B,QAATA,GAA2B,SAATA,WAEvFF,IAAzBL,EAAWE,EAAIC,MACfH,EAAWE,EAAIC,MAAQD,EAGvBH,EAAWE,KAAI,SAAAO,GACXR,EAAWE,EAAIC,MAAMK,GAAOC,SAAST,EAAWE,EAAIC,MAAMK,IAC1DR,EAAWE,EAAIC,MAAMK,IAAQC,SAASP,EAAIM,UAK/CtB,OAAOwB,OAAOV,K,8BAGjBW,GACJ,IAAIC,EAAO,CACP,GAAM,gBACN,UAAa,UACb,sBAAuB,kBACvB,mBAAoB,kBACpB,eAAgB,eAEpB,YAAuBP,IAAhBO,EAAKD,GAAuBC,EAAKD,GAASA,I,iCAG1CE,GACPhC,KAAKU,SAAS,CAAEb,UAAWmC,EAAKlC,KAAME,KAAKP,MAAME,MAAMqC,O,gCAGjDC,EAAKC,GACX,OAAO,IAASD,EAAIE,WAAWC,QAAUF,I,2CAGxBD,GACjB,MAAO,S,+BAGD,IAAD,OACCvC,EAAOM,KAAKP,MAAMC,KAExB,OAAgC,IAA5BM,KAAKP,MAAME,MAAM0C,OAAqB,kBAAC,WAAD,MAItC,kBAAC,WAAD,KACI,kBAACC,EAAA,EAAD,KACI,4BAAKtC,KAAKR,MAAM+C,OAChB,kBAACC,EAAA,EAAD,CAAKC,UAAU,aACX,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACL,kBAAC,IAAD,YAEI,kBAAC,IAAD,CACI3B,IAAK,EACLpB,IAAKI,KAAKP,MAAME,MAAM0C,OAAS,EAC/BO,SAAU,EACVC,cAAe,GACfC,OAAQ9C,KAAKR,MAAMsD,OACnBC,SAAU,SAAAf,GAAG,OAAI,EAAKgB,WAAWhB,IACjCiB,cAAe,SAAAjB,GAAG,OAAI,EAAKvC,MAAME,MAAMqC,IACvCkB,eAAe,EACfC,MAAOnD,KAAKP,MAAMI,UAClBuD,UAAU,MAItB,kBAACV,EAAA,EAAD,CAAKC,GAAI,IACT,kBAACD,EAAA,EAAD,CAAKC,GAAI,GACL,kBAAC,IAAD,oBAEI,kBAAC,IAAD,CACI3B,IAAK,EACLpB,IAAK,IACLgD,SAAU,GACVC,cAAe,GACfC,OAAQO,IAAOC,QACfP,SAAU,SAAAnD,GAAG,OAAI,EAAKc,SAAS,CAAEd,SACjCqD,cAAe,SAAAjB,GAAG,OAAIJ,SAAUI,EAAM,IAAO,KAC7CkB,eAAe,EACfC,MAAOnD,KAAKP,MAAMG,IAClBwD,UAAU,QAM9B,kBAACd,EAAA,EAAD,CAAWiB,OAAK,EAACC,MAAO,CAAEC,UAAW,oBAAqBC,aAAc,sBACpE,kBAAC,gBAAD,CACIC,iBAAkB,CACdC,OAAQ,EAAE,GAAI,EAAG,GACjBC,MAAO,MAGX,kBAAC,SAAD,CAAQC,OAAO,UAAUC,YAAa,MACtC,kBAAC,YAAD,CAAWD,OAAO,UAAUC,YAAa,KACxCrE,EAAK2C,OAAS,GACX,kBAAC,cAAD,CAAa2B,UAtI1B,2GAuIkB,qBAAGC,YACY7C,KAAI,SAAAa,GACZ,IAAMiC,EAAIxE,EAAKgC,MAAK,SAAAyC,GAAC,OAAK,EAAK5C,QAAQ4C,EAAE7C,QAAUW,EAAIE,WAAWiC,MAAQ,EAAK7C,QAAQ4C,EAAE7C,QAAUW,EAAIE,WAAWkC,aAClH,OACI,kBAAC,YAAD,CACI1C,IAAKM,EAAIqC,OACTN,UAAW/B,EACXsC,KAAML,EAAI,EAAKrD,WAAW,EAAK2D,UAAUvC,EAAKiC,EAAE,EAAKzE,MAAMK,QAAU,EAAK2E,qBAAqBxC,kB,GA5IzGyC,IAAMC,WCoB7BC,MA1Bf,WACE,OACE,yBAAKnC,UAAU,OACb,kBAACH,EAAA,EAAD,CAAWG,UAAU,QACnB,kBAAC,IAAD,CAASK,OAAO,WAAhB,yJAAgL,uBAAG+B,KAAK,+CAAR,qFAAhL,yDAAiX,uBAAGA,KAAK,wCAAR,6BAAjX,MAGF,kBAAC,EAAD,CACE5E,SAAS,yJACTsC,MAAM,iCACNvB,IAAK,EACLpB,IAAK,GACLkD,OAAO,YAGT,kBAAC,EAAD,CACE7C,SAAS,sJACTsC,MAAM,8BACNvB,IAAK,EACLpB,IAAK,GACLkD,OAAO,aCjBKgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxF,MAAK,SAAAyF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d5d83c8d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Fragment } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { scaleLinear } from \"d3-scale\";\nimport { Container, Row, Col } from 'reactstrap';\nimport {\n    ComposableMap,\n    Geographies,\n    Geography,\n    Sphere,\n    Graticule\n} from \"react-simple-maps\";\nimport { Slider, Intent, Label } from '@blueprintjs/core';\n\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nexport default class MapChart extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            dates: [],\n            max: 1,\n            dateIndex: 0,\n            date: '3/24/20'\n        }\n    }\n\n    componentDidMount() {\n        csv(this.props.datalink).then(data => {\n            data = this.mergeRegions(data);\n            let firstrow = Object.keys(data[0])\n            //console.log(\"firstrow\", data[1]);\n            for (let n = 1; n <= 4; n++) firstrow.shift()\n            firstrow.pop();\n            this.setState({ data, dateIndex: 0, date: firstrow[0], dates: [...firstrow] });\n        });\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n        this.colorScale = scaleLinear().domain([this.props.min, nextState.max]).range([\"#eee\", \"#f00\"]);\n    }\n\n    mergeRegions(data) {\n\n        let newPreData = {}\n        let manageKeys\n\n        data.map(row => {\n            row.Name = this.nameFix(row['Country/Region']);\n            if (manageKeys === undefined) {\n                manageKeys = Object.keys(row).filter(find => (find !== 'Province/State' && find !== 'Name' && find !== 'Lat' && find !== 'Long'))\n            }\n            if (newPreData[row.Name] === undefined) {\n                newPreData[row.Name] = row;\n            }\n            else {\n                manageKeys.map(key => {\n                    newPreData[row.Name][key] = parseInt(newPreData[row.Name][key])\n                    newPreData[row.Name][key] += parseInt(row[key])\n                })\n            }\n        })\n\n        return Object.values(newPreData)\n    }\n\n    nameFix(input) {\n        let conv = {\n            'US': 'United States',\n            'Greenland': 'Denmark',\n            'Congo (Brazzaville)': 'Dem. Rep. Congo',\n            'Congo (Kinshasa)': 'Dem. Rep. Congo',\n            'Korea, South': 'South Korea',\n        };\n        return conv[input] !== undefined ? conv[input] : input\n    }\n\n    changeDate(val) {\n        this.setState({ dateIndex: val, date: this.state.dates[val] })\n    }\n\n    perCapita(geo, count) {\n        return 100000 / geo.properties.POP_EST * count;\n    }\n\n    datalessCountryColor(geo) {\n        return \"#ddd\";\n    }\n\n    render() {\n        const data = this.state.data;\n\n        if (this.state.dates.length === 0) return <Fragment />\n\n        return (\n\n            <Fragment>\n                <Container>\n                    <h1>{this.props.title}</h1>\n                    <Row className=\"pl-3 pr-3\">\n                        <Col md={8}>\n                            <Label>\n                                Date\n                                <Slider\n                                    min={0}\n                                    max={this.state.dates.length - 1}\n                                    stepSize={1}\n                                    labelStepSize={10}\n                                    intent={this.props.intent}\n                                    onChange={val => this.changeDate(val)}\n                                    labelRenderer={val => this.state.dates[val]}\n                                    showTrackFill={true}\n                                    value={this.state.dateIndex}\n                                    vertical={false}\n                                />\n                            </Label>\n                        </Col>\n                        <Col md={1} />\n                        <Col md={3}>\n                            <Label>\n                                Dedramatizer\n                                <Slider\n                                    min={1}\n                                    max={400}\n                                    stepSize={50}\n                                    labelStepSize={50}\n                                    intent={Intent.SUCCESS}\n                                    onChange={max => this.setState({ max })}\n                                    labelRenderer={val => parseInt((val / 400) * 11)}\n                                    showTrackFill={false}\n                                    value={this.state.max}\n                                    vertical={false}\n                                />\n                            </Label>\n                        </Col>\n                    </Row>\n                </Container>\n                <Container fluid style={{ marginTop: 'calc((-100% / 12)', marginBottom: 'calc((-100% / 12)' }}>\n                    <ComposableMap\n                        projectionConfig={{\n                            rotate: [-10, 0, 0],\n                            scale: 147\n                        }}\n                    >\n                        <Sphere stroke=\"#E4E5E6\" strokeWidth={1.4} />\n                        <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} />\n                        {data.length > 0 && (\n                            <Geographies geography={geoUrl}>\n                                {({ geographies }) =>\n                                    geographies.map(geo => {\n                                        const d = data.find(s => (this.nameFix(s.Name) === geo.properties.NAME || this.nameFix(s.Name) === geo.properties.NAME_LONG));\n                                        return (\n                                            <Geography\n                                                key={geo.rsmKey}\n                                                geography={geo}\n                                                fill={d ? this.colorScale(this.perCapita(geo, d[this.state.date])) : this.datalessCountryColor(geo)}\n                                            />\n                                        );\n                                    })\n                                }\n                            </Geographies>\n                        )}\n                    </ComposableMap>\n                </Container>\n            </Fragment>\n        )\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap-grid.css'\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport MapChart from './Components/MapChart';\nimport { Callout } from '@blueprintjs/core';\nimport { Container} from 'reactstrap';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container className=\"mt-3\">\n        <Callout intent=\"primary\">I threw this page together for a friend, and you probably shouldn't rely on it for, well, anything at all. The data used is fetched directly from the <a href=\"https://github.com/CSSEGISandData/COVID-19/\">2019 Novel Coronavirus COVID-19 (2019-nCoV) Data Repository by Johns Hopkins CSSE</a> GitHub repository. Feel free to improve this page by <a href=\"https://github.com/willosof/covid-19\">sending me a pull request</a>!</Callout>\n      </Container>\n\n      <MapChart \n        datalink=\"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\" \n        title=\"COVID-19: Confirmed per capita\"\n        min={0}\n        max={50}\n        intent=\"warning\"\n      />\n\n      <MapChart \n        datalink=\"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv\" \n        title=\"COVID-19: Deaths per capita\"\n        min={0}\n        max={10}\n        intent=\"danger\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}